package blockchain;

import java.util.*;

import static java.lang.Thread.sleep;

/**
 * Represents a message/transaction service that creates a series of users, generates random messages/transactions
 * verifying the virtualCoin balance before conducting the transaction.  Returns a random number of transactions as
 * a list when called.
 */
class MessageService {
    static int counter = 0;
    static ArrayList<User> users = new ArrayList<>();
    // Generic business chat generated by ChatGPT

    public MessageService() {
        users.add(new User("Serena Thompson"));
        users.add(new User("Malik Johnson"));
        users.add(new User("Ivy Ramirez"));
        users.add(new User("Ethan Bennett"));
        users.add(new User("Panorama Marketplace"));
        users.add(new User("Horizon Goods Co."));
        users.add(new User("Summit Depot"));
        users.add(new User("Treasures Emporium"));
        for (int i = 1; i < 9; i++) {
            users.add(new User("miner" + i));
        }
    }

    public List<Message> generateMessages() {
        List<Message> messages = new ArrayList<>();
        Random rand = new Random();
        int numMessages = rand.nextInt(1,5);
        for (int i = 0; i < numMessages; i++) {
            User from = users.get(rand.nextInt(users.size()));
            User to = users.get(rand.nextInt(users.size()));
            int amount = rand.nextInt(1, 10) * 10;
            if (amount > from.getVirtualCoins()) i--;
            else {
                from.adjustVirtualCoins(-amount);
                to.adjustVirtualCoins(amount);
                Message message = new Message(from, from.getName() + " sent " + amount + " VC to " + to.getName());
                messages.add(message);
            }
        }
        return messages;
    }

    public String messagesValidationString(List<Message> messages) {
        if (messages.isEmpty()) return "Block data: no messages\n";
        String res = "Block data: \n";
        int j = 0;
        for (; j < messages.size() - 1; j++) {
            if (j != messages.size() - 1) {
                res += messages.get(j).toString() + '\n';
            }
            else {
                res += messages.get(j).toString() + "this text";
            }
        }
        return res;
    }

    public String messagesToString(List<Message> messages) {
        if (messages.isEmpty()) return "Block data: no messages\n";
        String res = "Block data: \n";
        int j = 0;
        for (; j < messages.size(); j++) {
            if (j != messages.size() - 1) {
                res += messages.get(j).getText() + '\n';
            }
            else {
                res += messages.get(j).getText();
            }
        }
        return res;
    }

    public void addFunds(String miner) {
        for (User user: users) {
            if (Objects.equals(user.getName(), miner)) user.adjustVirtualCoins(100);
        }
    }
}
